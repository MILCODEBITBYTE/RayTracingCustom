// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

float _GroundPlanY;

float2 _PixelOffset;

int _Reflections;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}


Ray CreateCameraRay(float2 uv)
{
    //Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1.0f)).xyz;
    
    //Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1.0f)).xyz;
    
    //Transform the direction from camera to world space an normalize
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}


struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0, 0, 0);
    hit.distance = 1.#INF;
    hit.normal = float3(0, 0, 0);
    
    return hit;
}

void IntersectGroundPlan(Ray ray, inout RayHit bestHit)
{
    //땅과 충돌 찾기
    
    //충돌 거리 구하기
    float t = -(ray.origin.y - _GroundPlanY) / ray.direction.y;
    
    //뒤로 날아간 레이 무시, 유효거리만 처리
    if(t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);

    }

}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
    //원점과의 거리
    float3 d = ray.origin - sphere.xyz;
    
    //구 평면 충돌 찾기
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);

    }

}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlan(ray, bestHit);
    IntersectSphere(ray, bestHit, float4(0.0f, 3.0f, 0.0f, 1.0f));
    IntersectSphere(ray, bestHit, float4(3.0f, 3.0f, 0.0f, 1.0f));
    IntersectSphere(ray, bestHit, float4(0.0f, 3.0f, 3.0f, 1.0f));
    IntersectSphere(ray, bestHit, float4(3.0f, 3.0f, 3.0f, 1.0f));
    return bestHit;

}

float3 shade(inout Ray ray, RayHit hit)
{
    //충돌 찾았으면
    if (hit.distance < 1.#INF)
    {
        float3 specular = float3(0.6f, 0.6f, 0.6f);
        
        //specular 반사에 따른 감쇠
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;
        
        return float3(0.0f, 0.0f, 0.0f);
    }
    //충돌 없으면 skybox
    else
    {
        ray.energy = 0;
        float intensity = 1.4f;
        
        int lod = 0;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        float theta = acos(ray.direction.y) / -PI;
        
        return intensity * _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), lod).xyz;
    }

}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Get the demenstions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    
    //Transform pixel to [-1, 1] range
    //샘플링
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    //Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    
    //Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < _Reflections; ++i)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * shade(ray, hit);
        //0 이면 중지
        if(!any(ray.energy))
            break;

    }
        
        
    Result[id.xy] = float4(result, 1);

}
